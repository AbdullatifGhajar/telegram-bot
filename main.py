import os
import sys
from io import StringIO


from telegram import ForceReply, Update
from telegram.ext import (Application, CommandHandler, ContextTypes,
                          MessageHandler, filters)

class OutputCapturer:
    def __enter__(self):
        # capture the output of the executed code by swapping the stdout temporarily
        self.old_stdout = sys.stdout
        self.redirected_output = sys.stdout = StringIO()
        return self

    def __exit__(self, type, value, tb):
        # ensure the stdout is restored
        sys.stdout = self.old_stdout
        
    def captured_output(self) -> str:
        return self.redirected_output.getvalue()

def execute_text(text: str | None) -> str:
    "Execute a string using python -c"
    if not text:
        return "ERROR: no text is provided"
    try:
        # capture the output of the executed code
        with OutputCapturer() as output_capturer:
            exec(text)
            return output_capturer.captured_output()

    except Exception as e:
        # inform the user of the error
        return f"ERROR: {e}"
        

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user = update.effective_user
    message = update.message
    assert message is not None and user is not None
    
    await message.reply_html(
        rf"Hi {user.mention_html()}!",
        reply_markup=ForceReply(selective=True),
    )


async def handle_execute_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Execute the user message"""        
    message = update.message
    assert message is not None
    
    await message.reply_text(execute_text(message.text))


def main():
    # create an app using the API token generated by BotFather
    api_token = os.environ.get("API_TOKEN")
    application = Application.builder().token(api_token).build()

    # commands handlers
    application.add_handler(CommandHandler("start", handle_start))

    # message handlers
    application.add_handler(
        # use filters to ensure it's a text and not a command
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_execute_message)
    )

    # add other handlers here ...

    # run the bot until the user presses Ctrl-C
    application.run_polling()


if __name__ == "__main__":
    main()
